part of 'widgets.dart';

const kDensePadding = 8.0;
const kDensePaddingX = 8.0;
const kDensePaddingY = 8.0;

const kMediumPadding = 12.0;
const kMediumPaddingX = 12.0;
const kMediumPaddingY = 12.0;

const kStandardPadding = 16.0;
const kStandardPaddingX = 16.0;
const kStandardPaddingY = 11.0;

const kExtendedPadding = 16.0;
const kExtendedPaddingX = 16.0;
const kExtendedPaddingY = 14.0;

const kDensePaddingAll = EdgeInsets.all(kDensePadding);
const kMediumPaddingAll = EdgeInsets.all(kMediumPadding);
const kStandardPaddingAll = EdgeInsets.all(kStandardPadding);
const kExtendedPaddingAll = EdgeInsets.all(kExtendedPadding);

const kDensePaddingH = EdgeInsets.symmetric(horizontal: kDensePaddingX);
const kMediumPaddingH = EdgeInsets.symmetric(horizontal: kMediumPaddingX);
const kStandardPaddingH = EdgeInsets.symmetric(horizontal: kStandardPaddingX);
const kExtendedPaddingH = EdgeInsets.symmetric(horizontal: kExtendedPaddingX);

const kDensePaddingV = EdgeInsets.symmetric(vertical: kDensePaddingY);
const kMediumPaddingV = EdgeInsets.symmetric(vertical: kMediumPaddingY);
const kStandardPaddingV = EdgeInsets.symmetric(vertical: kStandardPaddingY);
const kExtendedPaddingV = EdgeInsets.symmetric(vertical: kExtendedPaddingY);

const kTileConstraints = BoxConstraints(minHeight: 31);
const kTileFontSize = 14.0;

/// A list tile with various styles and options.
class SmartListTile extends StatelessWidget {
  /// Tile without fixed styles for easy customization.
  const SmartListTile.custom({
    this.leading,
    this.title,
    this.subtitle,
    this.titleChild,
    this.subtitleChild,
    this.titleChildren,
    this.subtitleChildren,
    this.titleHint,
    this.subtitleHint,
    this.trailingTop,
    this.trailingTopChild,
    this.trailingBottom,
    this.trailingBottomChild,
    this.trailingTitle,
    this.trailingTitleChild,
    this.trailingSubtitle,
    this.trailingSubtitleChild,
    this.titleStyle,
    this.subtitleStyle,
    this.trailingStyle,
    this.accessory,
    this.rows,
    this.belowRows,
    this.color,
    this.titleColor,
    this.subtitleColor,
    this.backgroundColor,
    this.headColor,
    this.trailingColor,
    this.leadingFilled = false,
    this.leadingTinted = false,
    this.leadingSmall = false,
    this.leadingOval = false,
    this.detail = false,
    this.padAccessory = true,
    this.showAccessory,
    this.tintAccessory,
    this.tintAble,
    this.titleWeight,
    this.subtitleWeight,
    this.titleSubbed = false,
    this.subtitleSubbed = false,
    this.destructive,
    this.titleExpanded = false,
    this.subtitleExpanded = false,
    this.enabled = true,
    this.highlighted,
    this.checked,
    this.cupertino = false,
    this.animate = false,
    this.horizontalPadding,
    this.verticalPadding,
    this.topPadding,
    this.bottomPadding,
    this.startPadding = kStandardPaddingX,
    this.endPadding = kStandardPaddingX,
    this.trailingPadding,
    this.verticalSpacing = 0,
    this.titleSize,
    this.subtitleSize,
    this.leadingSize,
    this.leadingBoxSize = SmartBox.kBoxSize,
    this.accessorySize,
    this.trailingSize = kRowTileTrailingSize,
    this.titleMaxLines,
    this.subtitleMaxLines,
    this.borderRadius,
    this.borderColor,
    this.margin,
    this.padding,
    this.leadingMargin = kRowTileLeadingMargin,
    this.leadingPadding = kRowTileLeadingPadding,
    this.titleChildrenPadding = kRowTileChildrenPadding,
    this.subtitleChildrenPadding = kRowTileChildrenPadding,
    this.constraints = kTileConstraints,
    this.alignment = CrossAxisAlignment.start,
    this.onTapTitle,
    this.onTapSubtitle,
    this.onTap,
    this.onTapHead,
    this.onTapLeading,
    super.key,
  });

  /// Tile without fixed styles for easy customization.
  const SmartListTile.center({
    this.leading,
    this.title,
    this.subtitle,
    this.titleChild,
    this.subtitleChild,
    this.titleChildren,
    this.subtitleChildren,
    this.titleHint,
    this.subtitleHint,
    this.trailingTop,
    this.trailingTopChild,
    this.trailingBottom,
    this.trailingBottomChild,
    this.trailingTitle,
    this.trailingTitleChild,
    this.trailingSubtitle,
    this.trailingSubtitleChild,
    this.titleStyle,
    this.subtitleStyle,
    this.trailingStyle,
    this.accessory,
    this.rows,
    this.belowRows,
    this.color,
    this.titleColor,
    this.subtitleColor,
    this.backgroundColor,
    this.headColor,
    this.trailingColor,
    this.leadingFilled = false,
    this.leadingTinted = false,
    this.leadingSmall = false,
    this.leadingOval = false,
    this.detail = false,
    this.padAccessory = true,
    this.showAccessory,
    this.tintAccessory,
    this.tintAble,
    this.titleWeight,
    this.subtitleWeight,
    this.titleSubbed = false,
    this.subtitleSubbed = false,
    this.destructive,
    this.titleExpanded = false,
    this.subtitleExpanded = false,
    this.enabled = true,
    this.highlighted,
    this.checked,
    this.cupertino = false,
    this.animate = false,
    this.horizontalPadding,
    this.verticalPadding,
    this.topPadding = kStandardPaddingY,
    this.bottomPadding = kStandardPaddingY,
    this.startPadding = kStandardPaddingX,
    this.endPadding = kStandardPaddingX,
    this.trailingPadding,
    this.verticalSpacing = 0,
    this.titleSize,
    this.subtitleSize,
    this.leadingSize,
    this.leadingBoxSize = SmartBox.kBoxSize,
    this.accessorySize,
    this.trailingSize = kRowTileTrailingSize,
    this.titleMaxLines,
    this.subtitleMaxLines,
    this.borderRadius,
    this.borderColor,
    this.margin,
    this.padding,
    this.leadingMargin = kRowTileLeadingMargin,
    this.leadingPadding = kRowTileLeadingPadding,
    this.titleChildrenPadding = kRowTileChildrenPadding,
    this.subtitleChildrenPadding = kRowTileChildrenPadding,
    this.constraints = kTileConstraints,
    this.alignment = CrossAxisAlignment.center,
    this.onTapTitle,
    this.onTapSubtitle,
    this.onTap,
    this.onTapHead,
    this.onTapLeading,
    super.key,
  });

  /// Tile without fixed styles for easy customization & caupertino tap effect.
  const SmartListTile.cupertino({
    this.leading,
    this.title,
    this.subtitle,
    this.titleChild,
    this.subtitleChild,
    this.titleChildren,
    this.subtitleChildren,
    this.titleHint,
    this.subtitleHint,
    this.trailingTop,
    this.trailingTopChild,
    this.trailingBottom,
    this.trailingBottomChild,
    this.trailingTitle,
    this.trailingTitleChild,
    this.trailingSubtitle,
    this.trailingSubtitleChild,
    this.titleStyle,
    this.subtitleStyle,
    this.trailingStyle,
    this.accessory,
    this.rows,
    this.belowRows,
    this.color,
    this.titleColor,
    this.subtitleColor,
    this.backgroundColor,
    this.headColor,
    this.trailingColor,
    this.leadingFilled = true,
    this.leadingTinted = false,
    this.leadingSmall = false,
    this.leadingOval = false,
    this.detail = false,
    this.padAccessory = true,
    this.showAccessory,
    this.tintAccessory,
    this.tintAble,
    this.titleWeight,
    this.subtitleWeight,
    this.titleSubbed = false,
    this.subtitleSubbed = false,
    this.destructive,
    this.titleExpanded = false,
    this.subtitleExpanded = false,
    this.enabled = true,
    this.highlighted,
    this.checked,
    this.cupertino = true,
    this.animate = false,
    this.horizontalPadding,
    this.verticalPadding,
    this.topPadding = kStandardPaddingY,
    this.bottomPadding = kStandardPaddingY,
    this.startPadding = kStandardPaddingX,
    this.endPadding = kStandardPaddingX,
    this.trailingPadding,
    this.verticalSpacing = 0,
    this.titleSize,
    this.subtitleSize,
    this.leadingSize,
    this.leadingBoxSize = SmartBox.kBoxSize,
    this.accessorySize,
    this.trailingSize = kRowTileTrailingSize,
    this.titleMaxLines,
    this.subtitleMaxLines,
    this.borderRadius,
    this.borderColor,
    this.margin,
    this.padding,
    this.leadingMargin = kRowTileLeadingMargin,
    this.leadingPadding = kRowTileLeadingPadding,
    this.titleChildrenPadding = kRowTileChildrenPadding,
    this.subtitleChildrenPadding = kRowTileChildrenPadding,
    this.constraints = kTileConstraints,
    this.alignment = CrossAxisAlignment.start,
    this.onTapTitle,
    this.onTapSubtitle,
    this.onTap,
    this.onTapHead,
    this.onTapLeading,
    super.key,
  });

  /// Tile with detail accessory
  const SmartListTile.detail({
    this.leading,
    this.title,
    this.subtitle,
    this.titleChild,
    this.subtitleChild,
    this.titleChildren,
    this.subtitleChildren,
    this.titleHint,
    this.subtitleHint,
    this.trailingTop,
    this.trailingTopChild,
    this.trailingBottom,
    this.trailingBottomChild,
    this.trailingTitle,
    this.trailingTitleChild,
    this.trailingSubtitle,
    this.trailingSubtitleChild,
    this.titleStyle,
    this.subtitleStyle,
    this.trailingStyle,
    this.accessory,
    this.rows,
    this.belowRows,
    this.color,
    this.titleColor,
    this.subtitleColor,
    this.backgroundColor,
    this.headColor,
    this.trailingColor,
    this.leadingFilled = true,
    this.leadingTinted = false,
    this.leadingSmall = false,
    this.leadingOval = false,
    this.detail = true,
    this.padAccessory,
    this.showAccessory,
    this.tintAccessory,
    this.tintAble,
    this.titleWeight = FontWeight.w600,
    this.subtitleWeight,
    this.titleSubbed = false,
    this.subtitleSubbed = true,
    this.destructive,
    this.titleExpanded = false,
    this.subtitleExpanded = false,
    this.enabled = true,
    this.highlighted,
    this.checked,
    this.cupertino = false,
    this.animate = false,
    this.horizontalPadding,
    this.verticalPadding,
    this.topPadding,
    this.bottomPadding,
    this.startPadding,
    this.endPadding,
    this.trailingPadding,
    this.verticalSpacing = 0,
    this.titleSize = kTileFontSize,
    this.subtitleSize = kTileFontSize,
    this.leadingSize,
    this.leadingBoxSize = SmartBox.kBoxSize,
    this.accessorySize,
    this.trailingSize = kRowTileTrailingSize,
    this.titleMaxLines,
    this.subtitleMaxLines,
    this.borderRadius,
    this.borderColor,
    this.margin,
    this.padding,
    this.leadingMargin = kRowTileLeadingMargin,
    this.leadingPadding = kRowTileLeadingPadding,
    this.titleChildrenPadding = kRowTileChildrenPadding,
    this.subtitleChildrenPadding = kRowTileChildrenPadding,
    this.constraints = kTileConstraints,
    this.alignment = CrossAxisAlignment.start,
    this.onTapTitle,
    this.onTapSubtitle,
    this.onTap,
    this.onTapHead,
    this.onTapLeading,
    super.key,
  });

  /// Tile with detail accessory and no filled leading
  const SmartListTile.detailNoFill({
    this.leading,
    this.title,
    this.subtitle,
    this.titleChild,
    this.subtitleChild,
    this.titleChildren,
    this.subtitleChildren,
    this.titleHint,
    this.subtitleHint,
    this.trailingTop,
    this.trailingTopChild,
    this.trailingBottom,
    this.trailingBottomChild,
    this.trailingTitle,
    this.trailingTitleChild,
    this.trailingSubtitle,
    this.trailingSubtitleChild,
    this.titleStyle,
    this.subtitleStyle,
    this.trailingStyle,
    this.accessory,
    this.rows,
    this.belowRows,
    this.color,
    this.titleColor,
    this.subtitleColor,
    this.backgroundColor,
    this.headColor,
    this.trailingColor,
    this.leadingFilled = false,
    this.leadingTinted = false,
    this.leadingSmall = false,
    this.leadingOval = false,
    this.detail = true,
    this.padAccessory,
    this.showAccessory,
    this.tintAccessory,
    this.tintAble,
    this.titleWeight = FontWeight.w500,
    this.subtitleWeight,
    this.titleSubbed = false,
    this.subtitleSubbed = true,
    this.destructive,
    this.titleExpanded = false,
    this.subtitleExpanded = false,
    this.enabled = true,
    this.highlighted,
    this.checked,
    this.cupertino = false,
    this.animate = false,
    this.horizontalPadding,
    this.verticalPadding,
    this.topPadding,
    this.bottomPadding,
    this.startPadding,
    this.endPadding,
    this.trailingPadding,
    this.verticalSpacing = 0,
    this.titleSize = kTileFontSize,
    this.subtitleSize = kTileFontSize,
    this.leadingSize,
    this.leadingBoxSize = SmartBox.kBoxSize,
    this.accessorySize,
    this.trailingSize = kRowTileTrailingSize,
    this.titleMaxLines,
    this.subtitleMaxLines,
    this.borderRadius,
    this.borderColor,
    this.margin,
    this.padding,
    this.leadingMargin = kRowTileLeadingMargin,
    this.leadingPadding = kRowTileLeadingPadding,
    this.titleChildrenPadding = kRowTileChildrenPadding,
    this.subtitleChildrenPadding = kRowTileChildrenPadding,
    this.constraints = kTileConstraints,
    this.alignment = CrossAxisAlignment.start,
    this.onTapTitle,
    this.onTapSubtitle,
    this.onTap,
    this.onTapHead,
    this.onTapLeading,
    super.key,
  });

  /// Tile with detail accessory and should be used if have extended content
  const SmartListTile.detailExtend({
    this.leading,
    this.title,
    this.subtitle,
    this.titleChild,
    this.subtitleChild,
    this.titleChildren,
    this.subtitleChildren,
    this.titleHint,
    this.subtitleHint,
    this.trailingTop,
    this.trailingTopChild,
    this.trailingBottom,
    this.trailingBottomChild,
    this.trailingTitle,
    this.trailingTitleChild,
    this.trailingSubtitle,
    this.trailingSubtitleChild,
    this.titleStyle,
    this.subtitleStyle,
    this.trailingStyle,
    this.accessory,
    this.rows,
    this.belowRows,
    this.color,
    this.titleColor,
    this.subtitleColor,
    this.backgroundColor,
    this.headColor,
    this.trailingColor,
    this.leadingFilled = true,
    this.leadingTinted = false,
    this.leadingSmall = false,
    this.leadingOval = false,
    this.detail = true,
    this.padAccessory,
    this.showAccessory,
    this.tintAccessory,
    this.tintAble,
    this.titleWeight = FontWeight.w600,
    this.subtitleWeight,
    this.titleSubbed = false,
    this.subtitleSubbed = true,
    this.destructive,
    this.titleExpanded = false,
    this.subtitleExpanded = false,
    this.enabled = true,
    this.highlighted,
    this.checked,
    this.cupertino = false,
    this.animate = false,
    this.horizontalPadding,
    this.verticalPadding,
    this.topPadding = kExtendedPaddingY,
    this.bottomPadding = kExtendedPaddingY,
    this.startPadding,
    this.endPadding,
    this.trailingPadding,
    this.verticalSpacing = 0,
    this.titleSize = kTileFontSize,
    this.subtitleSize = kTileFontSize,
    this.leadingSize,
    this.leadingBoxSize = SmartBox.kBoxSize,
    this.accessorySize,
    this.trailingSize = kRowTileTrailingSize,
    this.titleMaxLines,
    this.subtitleMaxLines,
    this.borderRadius,
    this.borderColor,
    this.margin,
    this.padding,
    this.leadingMargin = kRowTileLeadingMargin,
    this.leadingPadding = kRowTileLeadingPadding,
    this.titleChildrenPadding = kRowTileChildrenPadding,
    this.subtitleChildrenPadding = kRowTileChildrenPadding,
    this.constraints = kTileConstraints,
    this.alignment = CrossAxisAlignment.start,
    this.onTapTitle,
    this.onTapSubtitle,
    this.onTap,
    this.onTapHead,
    this.onTapLeading,
    super.key,
  });

  /// Tile with no accessory
  const SmartListTile.simple({
    this.leading,
    this.title,
    this.subtitle,
    this.titleChild,
    this.subtitleChild,
    this.titleChildren,
    this.subtitleChildren,
    this.titleHint,
    this.subtitleHint,
    this.trailingTop,
    this.trailingTopChild,
    this.trailingBottom,
    this.trailingBottomChild,
    this.trailingTitle,
    this.trailingTitleChild,
    this.trailingSubtitle,
    this.trailingSubtitleChild,
    this.titleStyle,
    this.subtitleStyle,
    this.trailingStyle,
    this.accessory,
    this.rows,
    this.belowRows,
    this.color,
    this.titleColor,
    this.subtitleColor,
    this.backgroundColor,
    this.headColor,
    this.trailingColor,
    this.leadingFilled = true,
    this.leadingTinted = false,
    this.leadingSmall = false,
    this.leadingOval = false,
    this.detail = false,
    this.padAccessory,
    this.showAccessory,
    this.tintAccessory,
    this.tintAble,
    this.titleWeight = FontWeight.w600,
    this.subtitleWeight,
    this.titleSubbed = false,
    this.subtitleSubbed = true,
    this.destructive,
    this.titleExpanded = false,
    this.subtitleExpanded = false,
    this.enabled = true,
    this.highlighted,
    this.checked,
    this.cupertino = false,
    this.animate = false,
    this.horizontalPadding,
    this.verticalPadding,
    this.topPadding,
    this.bottomPadding,
    this.startPadding,
    this.endPadding,
    this.trailingPadding,
    this.verticalSpacing = 0,
    this.titleSize = kTileFontSize,
    this.subtitleSize = kTileFontSize,
    this.leadingSize,
    this.leadingBoxSize = SmartBox.kBoxSize,
    this.accessorySize,
    this.trailingSize = kRowTileTrailingSize,
    this.titleMaxLines,
    this.subtitleMaxLines,
    this.borderRadius,
    this.borderColor,
    this.margin,
    this.padding,
    this.leadingMargin = kRowTileLeadingMargin,
    this.leadingPadding = kRowTileLeadingPadding,
    this.titleChildrenPadding = kRowTileChildrenPadding,
    this.subtitleChildrenPadding = kRowTileChildrenPadding,
    this.constraints = kTileConstraints,
    this.alignment = CrossAxisAlignment.start,
    this.onTapTitle,
    this.onTapSubtitle,
    this.onTap,
    this.onTapHead,
    this.onTapLeading,
    super.key,
  });

  /// Tile with no accessory and no filled leading
  const SmartListTile.noFill({
    this.leading,
    this.title,
    this.subtitle,
    this.titleChild,
    this.subtitleChild,
    this.titleChildren,
    this.subtitleChildren,
    this.titleHint,
    this.subtitleHint,
    this.trailingTop,
    this.trailingTopChild,
    this.trailingBottom,
    this.trailingBottomChild,
    this.trailingTitle,
    this.trailingTitleChild,
    this.trailingSubtitle,
    this.trailingSubtitleChild,
    this.titleStyle,
    this.subtitleStyle,
    this.trailingStyle,
    this.accessory,
    this.rows,
    this.belowRows,
    this.color,
    this.titleColor,
    this.subtitleColor,
    this.backgroundColor,
    this.headColor,
    this.trailingColor,
    this.leadingFilled = false,
    this.leadingTinted = false,
    this.leadingSmall = false,
    this.leadingOval = false,
    this.detail = false,
    this.padAccessory,
    this.showAccessory,
    this.tintAccessory,
    this.tintAble,
    this.titleWeight = FontWeight.w500,
    this.subtitleWeight,
    this.titleSubbed = false,
    this.subtitleSubbed = true,
    this.destructive,
    this.titleExpanded = false,
    this.subtitleExpanded = false,
    this.enabled = true,
    this.highlighted,
    this.checked,
    this.cupertino = false,
    this.animate = false,
    this.horizontalPadding,
    this.verticalPadding,
    this.topPadding,
    this.bottomPadding,
    this.startPadding,
    this.endPadding,
    this.trailingPadding,
    this.verticalSpacing = 0,
    this.titleSize = kTileFontSize,
    this.subtitleSize = kTileFontSize,
    this.leadingSize,
    this.leadingBoxSize = SmartBox.kBoxSize,
    this.accessorySize,
    this.trailingSize = kRowTileTrailingSize,
    this.titleMaxLines,
    this.subtitleMaxLines,
    this.borderRadius,
    this.borderColor,
    this.margin,
    this.padding,
    this.leadingMargin = kRowTileLeadingMargin,
    this.leadingPadding = kRowTileLeadingPadding,
    this.titleChildrenPadding = kRowTileChildrenPadding,
    this.subtitleChildrenPadding = kRowTileChildrenPadding,
    this.constraints = kTileConstraints,
    this.alignment = CrossAxisAlignment.start,
    this.onTapTitle,
    this.onTapSubtitle,
    this.onTap,
    this.onTapHead,
    this.onTapLeading,
    super.key,
  });

  /// Tile with no accessory and should be used if have extended content
  const SmartListTile.extend({
    this.leading,
    this.title,
    this.subtitle,
    this.titleChild,
    this.subtitleChild,
    this.titleChildren,
    this.subtitleChildren,
    this.titleHint,
    this.subtitleHint,
    this.trailingTop,
    this.trailingTopChild,
    this.trailingBottom,
    this.trailingBottomChild,
    this.trailingTitle,
    this.trailingTitleChild,
    this.trailingSubtitle,
    this.trailingSubtitleChild,
    this.titleStyle,
    this.subtitleStyle,
    this.trailingStyle,
    this.accessory,
    this.rows,
    this.belowRows,
    this.color,
    this.titleColor,
    this.subtitleColor,
    this.backgroundColor,
    this.headColor,
    this.trailingColor,
    this.leadingFilled = true,
    this.leadingTinted = false,
    this.leadingSmall = false,
    this.leadingOval = false,
    this.detail = false,
    this.padAccessory,
    this.showAccessory,
    this.tintAccessory,
    this.tintAble,
    this.titleWeight = FontWeight.w600,
    this.subtitleWeight,
    this.titleSubbed = false,
    this.subtitleSubbed = true,
    this.destructive,
    this.titleExpanded = false,
    this.subtitleExpanded = false,
    this.enabled = true,
    this.highlighted,
    this.checked,
    this.cupertino = false,
    this.animate = false,
    this.horizontalPadding,
    this.verticalPadding,
    this.topPadding = kExtendedPaddingY,
    this.bottomPadding = kExtendedPaddingY,
    this.startPadding,
    this.endPadding,
    this.trailingPadding,
    this.verticalSpacing = 0,
    this.titleSize = kTileFontSize,
    this.subtitleSize = kTileFontSize,
    this.leadingSize,
    this.leadingBoxSize = SmartBox.kBoxSize,
    this.accessorySize,
    this.trailingSize = kRowTileTrailingSize,
    this.titleMaxLines,
    this.subtitleMaxLines,
    this.borderRadius,
    this.borderColor,
    this.margin,
    this.padding,
    this.leadingMargin = kRowTileLeadingMargin,
    this.leadingPadding = kRowTileLeadingPadding,
    this.titleChildrenPadding = kRowTileChildrenPadding,
    this.subtitleChildrenPadding = kRowTileChildrenPadding,
    this.constraints = kTileConstraints,
    this.alignment = CrossAxisAlignment.start,
    this.onTapTitle,
    this.onTapSubtitle,
    this.onTap,
    this.onTapHead,
    this.onTapLeading,
    super.key,
  });

  /// Tile with no accessory and dense paddings
  const SmartListTile.dense({
    this.leading,
    this.title,
    this.subtitle,
    this.titleChild,
    this.subtitleChild,
    this.titleChildren,
    this.subtitleChildren,
    this.titleHint,
    this.subtitleHint,
    this.trailingTop,
    this.trailingTopChild,
    this.trailingBottom,
    this.trailingBottomChild,
    this.trailingTitle,
    this.trailingTitleChild,
    this.trailingSubtitle,
    this.trailingSubtitleChild,
    this.titleStyle,
    this.subtitleStyle,
    this.trailingStyle,
    this.accessory,
    this.rows,
    this.belowRows,
    this.color,
    this.titleColor,
    this.subtitleColor,
    this.backgroundColor,
    this.headColor,
    this.trailingColor,
    this.leadingFilled = true,
    this.leadingTinted = false,
    this.leadingSmall = false,
    this.leadingOval = false,
    this.detail = false,
    this.padAccessory,
    this.showAccessory,
    this.tintAccessory,
    this.tintAble,
    this.titleWeight = FontWeight.w600,
    this.subtitleWeight,
    this.titleSubbed = false,
    this.subtitleSubbed = true,
    this.destructive,
    this.titleExpanded = false,
    this.subtitleExpanded = false,
    this.enabled = true,
    this.highlighted,
    this.checked,
    this.cupertino = false,
    this.animate = false,
    this.horizontalPadding,
    this.verticalPadding,
    this.topPadding = kDensePaddingY,
    this.bottomPadding = kDensePaddingY,
    this.startPadding = kDensePaddingX,
    this.endPadding = kDensePaddingX,
    this.trailingPadding,
    this.verticalSpacing = 0,
    this.titleSize = kTileFontSize,
    this.subtitleSize = kTileFontSize,
    this.leadingSize,
    this.leadingBoxSize = SmartBox.kBoxSize,
    this.accessorySize,
    this.trailingSize = kRowTileTrailingSize,
    this.titleMaxLines,
    this.subtitleMaxLines,
    this.borderRadius,
    this.borderColor,
    this.margin,
    this.padding,
    this.leadingMargin = kRowTileLeadingMargin,
    this.leadingPadding = kRowTileLeadingDensePadding,
    this.titleChildrenPadding = kRowTileChildrenPadding,
    this.subtitleChildrenPadding = kRowTileChildrenPadding,
    this.constraints = kTileConstraints,
    this.alignment = CrossAxisAlignment.center,
    this.onTapTitle,
    this.onTapSubtitle,
    this.onTap,
    this.onTapHead,
    this.onTapLeading,
    super.key,
  });

  /// Tile with no accessory and medium paddings
  const SmartListTile.medium({
    this.leading,
    this.title,
    this.subtitle,
    this.titleChild,
    this.subtitleChild,
    this.titleChildren,
    this.subtitleChildren,
    this.titleHint,
    this.subtitleHint,
    this.trailingTop,
    this.trailingTopChild,
    this.trailingBottom,
    this.trailingBottomChild,
    this.trailingTitle,
    this.trailingTitleChild,
    this.trailingSubtitle,
    this.trailingSubtitleChild,
    this.titleStyle,
    this.subtitleStyle,
    this.trailingStyle,
    this.accessory,
    this.rows,
    this.belowRows,
    this.color,
    this.titleColor,
    this.subtitleColor,
    this.backgroundColor,
    this.headColor,
    this.trailingColor,
    this.leadingFilled = true,
    this.leadingTinted = false,
    this.leadingSmall = false,
    this.leadingOval = false,
    this.detail = false,
    this.padAccessory,
    this.showAccessory,
    this.tintAccessory,
    this.tintAble,
    this.titleWeight = FontWeight.w600,
    this.subtitleWeight,
    this.titleSubbed = false,
    this.subtitleSubbed = true,
    this.destructive,
    this.titleExpanded = false,
    this.subtitleExpanded = false,
    this.enabled = true,
    this.highlighted,
    this.checked,
    this.cupertino = false,
    this.animate = false,
    this.horizontalPadding,
    this.verticalPadding,
    this.topPadding = kMediumPaddingY,
    this.bottomPadding = kMediumPaddingY,
    this.startPadding = kMediumPaddingX,
    this.endPadding = kMediumPaddingX,
    this.trailingPadding,
    this.verticalSpacing = 0,
    this.titleSize = kTileFontSize,
    this.subtitleSize = kTileFontSize,
    this.leadingSize,
    this.leadingBoxSize = SmartBox.kBoxSize,
    this.accessorySize,
    this.trailingSize = kRowTileTrailingSize,
    this.titleMaxLines,
    this.subtitleMaxLines,
    this.borderRadius,
    this.borderColor,
    this.margin,
    this.padding,
    this.leadingMargin = kRowTileLeadingMargin,
    this.leadingPadding = kRowTileLeadingMediumPadding,
    this.titleChildrenPadding = kRowTileChildrenPadding,
    this.subtitleChildrenPadding = kRowTileChildrenPadding,
    this.constraints = kTileConstraints,
    this.alignment = CrossAxisAlignment.center,
    this.onTapTitle,
    this.onTapSubtitle,
    this.onTap,
    this.onTapHead,
    this.onTapLeading,
    super.key,
  });

  /// Tile with no accessory and centered content alignment
  const SmartListTile.simpleCenter({
    this.leading,
    this.title,
    this.subtitle,
    this.titleChild,
    this.subtitleChild,
    this.titleChildren,
    this.subtitleChildren,
    this.titleHint,
    this.subtitleHint,
    this.trailingTop,
    this.trailingTopChild,
    this.trailingBottom,
    this.trailingBottomChild,
    this.trailingTitle,
    this.trailingTitleChild,
    this.trailingSubtitle,
    this.trailingSubtitleChild,
    this.titleStyle,
    this.subtitleStyle,
    this.trailingStyle,
    this.accessory,
    this.rows,
    this.belowRows,
    this.color,
    this.titleColor,
    this.subtitleColor,
    this.backgroundColor,
    this.headColor,
    this.trailingColor,
    this.leadingFilled = true,
    this.leadingTinted = false,
    this.leadingSmall = false,
    this.leadingOval = false,
    this.detail = false,
    this.padAccessory,
    this.showAccessory,
    this.tintAccessory,
    this.tintAble,
    this.titleWeight = FontWeight.w600,
    this.subtitleWeight,
    this.titleSubbed = false,
    this.subtitleSubbed = true,
    this.destructive,
    this.titleExpanded = false,
    this.subtitleExpanded = false,
    this.enabled = true,
    this.highlighted,
    this.checked,
    this.cupertino = false,
    this.animate = false,
    this.horizontalPadding,
    this.verticalPadding,
    this.topPadding,
    this.bottomPadding,
    this.startPadding,
    this.endPadding,
    this.trailingPadding,
    this.verticalSpacing = 0,
    this.titleSize = kTileFontSize,
    this.subtitleSize = kTileFontSize,
    this.leadingSize,
    this.leadingBoxSize = SmartBox.kBoxSize,
    this.accessorySize,
    this.trailingSize = kRowTileTrailingSize,
    this.titleMaxLines,
    this.subtitleMaxLines,
    this.borderRadius,
    this.borderColor,
    this.margin,
    this.padding,
    this.leadingMargin = kRowTileLeadingMargin,
    this.leadingPadding = kRowTileLeadingPadding,
    this.titleChildrenPadding = kRowTileChildrenPadding,
    this.subtitleChildrenPadding = kRowTileChildrenPadding,
    this.constraints = kTileConstraints,
    this.alignment = CrossAxisAlignment.center,
    this.onTapTitle,
    this.onTapSubtitle,
    this.onTap,
    this.onTapHead,
    this.onTapLeading,
    super.key,
  });

  /// Tile with no accessory and centered content alignment and no paddings
  const SmartListTile.noPad({
    this.leading,
    this.title,
    this.subtitle,
    this.titleChild,
    this.subtitleChild,
    this.titleChildren,
    this.subtitleChildren,
    this.titleHint,
    this.subtitleHint,
    this.trailingTop,
    this.trailingTopChild,
    this.trailingBottom,
    this.trailingBottomChild,
    this.trailingTitle,
    this.trailingTitleChild,
    this.trailingSubtitle,
    this.trailingSubtitleChild,
    this.titleStyle,
    this.subtitleStyle,
    this.trailingStyle,
    this.accessory,
    this.rows,
    this.belowRows,
    this.color,
    this.titleColor,
    this.subtitleColor,
    this.backgroundColor,
    this.headColor,
    this.trailingColor,
    this.leadingFilled = true,
    this.leadingTinted = false,
    this.leadingSmall = false,
    this.leadingOval = false,
    this.detail = false,
    this.padAccessory,
    this.showAccessory,
    this.tintAccessory,
    this.tintAble,
    this.titleWeight = FontWeight.w600,
    this.subtitleWeight,
    this.titleSubbed = false,
    this.subtitleSubbed = true,
    this.destructive,
    this.titleExpanded = false,
    this.subtitleExpanded = false,
    this.enabled = true,
    this.highlighted,
    this.checked,
    this.cupertino = false,
    this.animate = false,
    this.horizontalPadding,
    this.verticalPadding,
    this.topPadding = 0,
    this.bottomPadding = 0,
    this.startPadding = 0,
    this.endPadding = 0,
    this.trailingPadding,
    this.verticalSpacing = 0,
    this.titleSize = kTileFontSize,
    this.subtitleSize = kTileFontSize,
    this.leadingSize,
    this.leadingBoxSize = SmartBox.kBoxSize,
    this.accessorySize,
    this.trailingSize = kRowTileTrailingSize,
    this.titleMaxLines,
    this.subtitleMaxLines,
    this.borderRadius,
    this.borderColor,
    this.margin,
    this.padding,
    this.leadingMargin = kRowTileLeadingMargin,
    this.leadingPadding = kRowTileLeadingPadding,
    this.titleChildrenPadding = kRowTileChildrenPadding,
    this.subtitleChildrenPadding = kRowTileChildrenPadding,
    this.constraints = kTileConstraints,
    this.alignment = CrossAxisAlignment.center,
    this.onTapTitle,
    this.onTapSubtitle,
    this.onTap,
    this.onTapHead,
    this.onTapLeading,
    super.key,
  });

  /// Tile with no accessory, w500 title and simple centered content alignment
  const SmartListTile.center500({
    this.leading,
    this.title,
    this.subtitle,
    this.titleChild,
    this.subtitleChild,
    this.titleChildren,
    this.subtitleChildren,
    this.titleHint,
    this.subtitleHint,
    this.trailingTop,
    this.trailingTopChild,
    this.trailingBottom,
    this.trailingBottomChild,
    this.trailingTitle,
    this.trailingTitleChild,
    this.trailingSubtitle,
    this.trailingSubtitleChild,
    this.titleStyle,
    this.subtitleStyle,
    this.trailingStyle,
    this.accessory,
    this.rows,
    this.belowRows,
    this.color,
    this.titleColor,
    this.subtitleColor,
    this.backgroundColor,
    this.headColor,
    this.trailingColor,
    this.leadingFilled = true,
    this.leadingTinted = false,
    this.leadingSmall = false,
    this.leadingOval = false,
    this.detail = false,
    this.padAccessory,
    this.showAccessory,
    this.tintAccessory,
    this.tintAble,
    this.titleWeight = FontWeight.w500,
    this.subtitleWeight,
    this.titleSubbed = false,
    this.subtitleSubbed = true,
    this.destructive,
    this.titleExpanded = false,
    this.subtitleExpanded = false,
    this.enabled = true,
    this.highlighted,
    this.checked,
    this.cupertino = false,
    this.animate = false,
    this.horizontalPadding,
    this.verticalPadding,
    this.topPadding,
    this.bottomPadding,
    this.startPadding,
    this.endPadding,
    this.trailingPadding,
    this.verticalSpacing = 0,
    this.titleSize = kTileFontSize,
    this.subtitleSize = kTileFontSize,
    this.leadingSize,
    this.leadingBoxSize = SmartBox.kBoxSize,
    this.accessorySize,
    this.trailingSize = kRowTileTrailingSize,
    this.titleMaxLines,
    this.subtitleMaxLines,
    this.borderRadius,
    this.borderColor,
    this.margin,
    this.padding,
    this.leadingMargin = kRowTileLeadingMargin,
    this.leadingPadding = kRowTileLeadingPadding,
    this.titleChildrenPadding = kRowTileChildrenPadding,
    this.subtitleChildrenPadding = kRowTileChildrenPadding,
    this.constraints = kTileConstraints,
    this.alignment = CrossAxisAlignment.center,
    this.onTapTitle,
    this.onTapSubtitle,
    this.onTap,
    this.onTapHead,
    this.onTapLeading,
    super.key,
  });

  /// Tile having rich features with no accessory and top leading
  const SmartListTile.rich({
    this.leading,
    this.title,
    this.subtitle,
    this.titleChild,
    this.subtitleChild,
    this.titleChildren,
    this.subtitleChildren,
    this.titleHint,
    this.subtitleHint,
    this.trailingTop,
    this.trailingTopChild,
    this.trailingBottom,
    this.trailingBottomChild,
    this.trailingTitle,
    this.trailingTitleChild,
    this.trailingSubtitle,
    this.trailingSubtitleChild,
    this.titleStyle,
    this.subtitleStyle,
    this.trailingStyle,
    this.accessory,
    this.rows,
    this.belowRows,
    this.color,
    this.titleColor,
    this.subtitleColor,
    this.backgroundColor,
    this.headColor,
    this.trailingColor,
    this.leadingFilled = true,
    this.leadingTinted = false,
    this.leadingSmall = true,
    this.leadingOval = true,
    this.detail = false,
    this.padAccessory = true,
    this.showAccessory,
    this.tintAccessory,
    this.tintAble,
    this.titleWeight = FontWeight.w600,
    this.subtitleWeight,
    this.titleSubbed = false,
    this.subtitleSubbed = true,
    this.destructive,
    this.titleExpanded = false,
    this.subtitleExpanded = false,
    this.enabled = true,
    this.highlighted,
    this.checked,
    this.cupertino = false,
    this.animate = false,
    this.horizontalPadding,
    this.verticalPadding,
    this.topPadding,
    this.bottomPadding,
    this.startPadding = kMediumPaddingX,
    this.endPadding = kMediumPaddingX,
    this.trailingPadding,
    this.verticalSpacing = 5,
    this.titleSize = kRowTileFontSize,
    this.subtitleSize = kRowTileFontSize,
    this.leadingSize,
    this.leadingBoxSize = SmartBox.kBoxSize,
    this.accessorySize,
    this.trailingSize = kRowTileTrailingSize,
    this.titleMaxLines,
    this.subtitleMaxLines,
    this.borderRadius,
    this.borderColor,
    this.margin,
    this.padding,
    this.leadingMargin = kRowTileLeadingMargin,
    this.leadingPadding = kRowTileLeadingMediumPadding,
    this.titleChildrenPadding = kRowTileChildrenPadding,
    this.subtitleChildrenPadding = kRowTileChildrenPadding,
    this.constraints = const BoxConstraints(minHeight: 34),
    this.alignment = CrossAxisAlignment.start,
    this.onTapTitle,
    this.onTapSubtitle,
    this.onTap,
    this.onTapHead,
    this.onTapLeading,
    super.key,
  });

  /// Tile having row features with no accessory and centered leading
  const SmartListTile.row({
    this.leading,
    this.title,
    this.subtitle,
    this.titleChild,
    this.subtitleChild,
    this.titleChildren,
    this.subtitleChildren,
    this.titleHint,
    this.subtitleHint,
    this.trailingTop,
    this.trailingTopChild,
    this.trailingBottom,
    this.trailingBottomChild,
    this.trailingTitle,
    this.trailingTitleChild,
    this.trailingSubtitle,
    this.trailingSubtitleChild,
    this.titleStyle,
    this.subtitleStyle,
    this.trailingStyle,
    this.accessory,
    this.rows,
    this.belowRows,
    this.color,
    this.titleColor,
    this.subtitleColor,
    this.backgroundColor = Colors.transparent,
    this.headColor,
    this.trailingColor,
    this.leadingFilled = false,
    this.leadingTinted = false,
    this.leadingSmall = true,
    this.leadingOval = false,
    this.detail = false,
    this.padAccessory = true,
    this.showAccessory,
    this.tintAccessory,
    this.tintAble,
    this.titleWeight = FontWeight.w600,
    this.subtitleWeight,
    this.titleSubbed = true,
    this.subtitleSubbed = true,
    this.destructive,
    this.titleExpanded = false,
    this.subtitleExpanded = false,
    this.enabled = true,
    this.highlighted,
    this.checked,
    this.cupertino = false,
    this.animate = false,
    this.horizontalPadding,
    this.verticalPadding,
    this.topPadding = kDensePaddingY,
    this.bottomPadding = kDensePaddingY,
    this.startPadding,
    this.endPadding,
    this.trailingPadding,
    this.verticalSpacing = 0,
    this.titleSize = kRowTileFontSize,
    this.subtitleSize = kRowTileFontSize,
    this.leadingSize,
    this.leadingBoxSize = SmartBox.kBoxSize,
    this.accessorySize,
    this.trailingSize = kRowTileTrailingSize,
    this.titleMaxLines,
    this.subtitleMaxLines,
    this.borderRadius,
    this.borderColor,
    this.margin,
    this.padding,
    this.leadingMargin = kRowTileLeadingMargin,
    this.leadingPadding = kRowTileLeadingPadding,
    this.titleChildrenPadding = kRowTileChildrenPadding,
    this.subtitleChildrenPadding = kRowTileChildrenPadding,
    this.constraints = kRowTileConstraints,
    this.alignment = CrossAxisAlignment.center,
    this.onTapTitle,
    this.onTapSubtitle,
    this.onTap,
    this.onTapHead,
    this.onTapLeading,
    super.key,
  });

  /// Tile having row features with no accessory and top leading
  const SmartListTile.rowRich({
    this.leading,
    this.title,
    this.subtitle,
    this.titleChild,
    this.subtitleChild,
    this.titleChildren,
    this.subtitleChildren,
    this.titleHint,
    this.subtitleHint,
    this.trailingTop,
    this.trailingTopChild,
    this.trailingBottom,
    this.trailingBottomChild,
    this.trailingTitle,
    this.trailingTitleChild,
    this.trailingSubtitle,
    this.trailingSubtitleChild,
    this.titleStyle,
    this.subtitleStyle,
    this.trailingStyle,
    this.accessory,
    this.rows,
    this.belowRows,
    this.color,
    this.titleColor,
    this.subtitleColor,
    this.backgroundColor,
    this.headColor,
    this.trailingColor,
    this.leadingFilled = true,
    this.leadingTinted = false,
    this.leadingSmall = true,
    this.leadingOval = true,
    this.detail = false,
    this.padAccessory = true,
    this.showAccessory,
    this.tintAccessory,
    this.tintAble,
    this.titleWeight = FontWeight.w600,
    this.subtitleWeight,
    this.titleSubbed = false,
    this.subtitleSubbed = true,
    this.destructive,
    this.titleExpanded = false,
    this.subtitleExpanded = false,
    this.enabled = true,
    this.highlighted,
    this.checked,
    this.cupertino = false,
    this.animate = false,
    this.horizontalPadding,
    this.verticalPadding,
    this.topPadding = kStandardPaddingY,
    this.bottomPadding = kStandardPaddingY,
    this.startPadding = kStandardPaddingX,
    this.endPadding = kStandardPaddingX,
    this.trailingPadding,
    this.verticalSpacing = 5,
    this.titleSize = kRowTileFontSize,
    this.subtitleSize = kRowTileFontSize,
    this.leadingSize,
    this.leadingBoxSize = SmartBox.kBoxSize,
    this.accessorySize,
    this.trailingSize = kRowTileTrailingSize,
    this.titleMaxLines,
    this.subtitleMaxLines,
    this.borderRadius,
    this.borderColor,
    this.margin,
    this.padding,
    this.leadingMargin = kRowTileLeadingMargin,
    this.leadingPadding = kRowTileLeadingPadding,
    this.titleChildrenPadding = kRowTileChildrenPadding,
    this.subtitleChildrenPadding = kRowTileChildrenPadding,
    this.constraints = kRowTileConstraints,
    this.alignment = CrossAxisAlignment.start,
    this.onTapTitle,
    this.onTapSubtitle,
    this.onTap,
    this.onTapHead,
    this.onTapLeading,
    super.key,
  });

  /// Tile having row features with no accessory and anchored leading at top
  const SmartListTile.rowExtend({
    this.leading,
    this.title,
    this.subtitle,
    this.titleChild,
    this.subtitleChild,
    this.titleChildren,
    this.subtitleChildren,
    this.titleHint,
    this.subtitleHint,
    this.trailingTop,
    this.trailingTopChild,
    this.trailingBottom,
    this.trailingBottomChild,
    this.trailingTitle,
    this.trailingTitleChild,
    this.trailingSubtitle,
    this.trailingSubtitleChild,
    this.titleStyle,
    this.subtitleStyle,
    this.trailingStyle,
    this.accessory,
    this.rows,
    this.belowRows,
    this.color,
    this.titleColor,
    this.subtitleColor,
    this.backgroundColor = Colors.transparent,
    this.headColor,
    this.trailingColor,
    this.leadingFilled = false,
    this.leadingTinted = false,
    this.leadingSmall = true,
    this.leadingOval = false,
    this.detail = false,
    this.padAccessory = true,
    this.showAccessory,
    this.tintAccessory,
    this.tintAble,
    this.titleWeight = FontWeight.w600,
    this.subtitleWeight,
    this.titleSubbed = false,
    this.subtitleSubbed = true,
    this.destructive,
    this.titleExpanded = false,
    this.subtitleExpanded = false,
    this.enabled = true,
    this.highlighted,
    this.checked,
    this.cupertino = false,
    this.animate = false,
    this.horizontalPadding,
    this.verticalPadding,
    this.topPadding = kDensePaddingY,
    this.bottomPadding = kDensePaddingY,
    this.startPadding,
    this.endPadding,
    this.trailingPadding,
    this.verticalSpacing = 0,
    this.titleSize = kRowTileFontSize,
    this.subtitleSize = kRowTileFontSize,
    this.leadingSize,
    this.leadingBoxSize = SmartBox.kBoxSize,
    this.accessorySize,
    this.trailingSize = kRowTileTrailingSize,
    this.titleMaxLines,
    this.subtitleMaxLines,
    this.borderRadius,
    this.borderColor,
    this.margin,
    this.padding,
    this.leadingMargin = kRowTileLeadingMargin,
    this.leadingPadding = kRowTileLeadingPadding,
    this.titleChildrenPadding = kRowTileChildrenPadding,
    this.subtitleChildrenPadding = kRowTileChildrenPadding,
    this.constraints = kRowTileConstraints,
    this.alignment = CrossAxisAlignment.start,
    this.onTapTitle,
    this.onTapSubtitle,
    this.onTap,
    this.onTapHead,
    this.onTapLeading,
    super.key,
  });

  /// Tile with no accessory, no background and not filled but oval leading
  const SmartListTile.plain({
    this.leading,
    this.title,
    this.subtitle,
    this.titleChild,
    this.subtitleChild,
    this.titleChildren,
    this.subtitleChildren,
    this.titleHint,
    this.subtitleHint,
    this.trailingTop,
    this.trailingTopChild,
    this.trailingBottom,
    this.trailingBottomChild,
    this.trailingTitle,
    this.trailingTitleChild,
    this.trailingSubtitle,
    this.trailingSubtitleChild,
    this.titleStyle,
    this.subtitleStyle,
    this.trailingStyle,
    this.accessory,
    this.rows,
    this.belowRows,
    this.color,
    this.titleColor,
    this.subtitleColor,
    this.backgroundColor = Colors.transparent,
    this.headColor,
    this.trailingColor,
    this.leadingFilled = false,
    this.leadingTinted = false,
    this.leadingSmall = false,
    this.leadingOval = true,
    this.detail = false,
    this.padAccessory,
    this.showAccessory,
    this.tintAccessory,
    this.tintAble,
    this.titleWeight = FontWeight.w600,
    this.subtitleWeight,
    this.titleSubbed = false,
    this.subtitleSubbed = true,
    this.destructive,
    this.titleExpanded = false,
    this.subtitleExpanded = false,
    this.enabled = true,
    this.highlighted,
    this.checked,
    this.cupertino = false,
    this.animate = false,
    this.horizontalPadding,
    this.verticalPadding,
    this.topPadding = 0,
    this.bottomPadding = 10,
    this.startPadding,
    this.endPadding,
    this.trailingPadding,
    this.verticalSpacing = 0,
    this.titleSize = kTileFontSize,
    this.subtitleSize = kTileFontSize,
    this.leadingSize,
    this.leadingBoxSize = SmartBox.kBoxSize,
    this.accessorySize,
    this.trailingSize = kRowTileTrailingSize,
    this.titleMaxLines,
    this.subtitleMaxLines,
    this.borderRadius,
    this.borderColor,
    this.margin,
    this.padding,
    this.leadingMargin = kRowTileLeadingMargin,
    this.leadingPadding = kRowTileLeadingPadding,
    this.titleChildrenPadding = kRowTileChildrenPadding,
    this.subtitleChildrenPadding = kRowTileChildrenPadding,
    this.constraints = kTileConstraints,
    this.alignment = CrossAxisAlignment.center,
    this.onTapTitle,
    this.onTapSubtitle,
    this.onTap,
    this.onTapHead,
    this.onTapLeading,
    super.key,
  });

  /// Tile with no accessory, no background, no side paddings, and not filled
  /// but oval leading.
  /// Most compatible to show user profile data.
  const SmartListTile.profile({
    this.leading,
    this.title,
    this.subtitle,
    this.titleChild,
    this.subtitleChild,
    this.titleChildren,
    this.subtitleChildren,
    this.titleHint,
    this.subtitleHint,
    this.trailingTop,
    this.trailingTopChild,
    this.trailingBottom,
    this.trailingBottomChild,
    this.trailingTitle,
    this.trailingTitleChild,
    this.trailingSubtitle,
    this.trailingSubtitleChild,
    this.titleStyle,
    this.subtitleStyle,
    this.trailingStyle,
    this.accessory,
    this.rows,
    this.belowRows,
    this.color,
    this.titleColor,
    this.subtitleColor,
    this.backgroundColor = Colors.transparent,
    this.headColor,
    this.trailingColor,
    this.leadingFilled = false,
    this.leadingTinted = false,
    this.leadingSmall = false,
    this.leadingOval = true,
    this.detail = false,
    this.padAccessory,
    this.showAccessory,
    this.tintAccessory,
    this.tintAble,
    this.titleWeight = FontWeight.w600,
    this.subtitleWeight,
    this.titleSubbed = false,
    this.subtitleSubbed = true,
    this.destructive,
    this.titleExpanded = false,
    this.subtitleExpanded = false,
    this.enabled = true,
    this.highlighted,
    this.checked,
    this.cupertino = false,
    this.animate = false,
    this.horizontalPadding,
    this.verticalPadding,
    this.topPadding = 0,
    this.bottomPadding = 0,
    this.startPadding = 0,
    this.endPadding = 0,
    this.trailingPadding,
    this.verticalSpacing = 0,
    this.titleSize = kTileFontSize,
    this.subtitleSize = kTileFontSize,
    this.leadingSize,
    this.leadingBoxSize = SmartBox.kBoxSize,
    this.accessorySize,
    this.trailingSize = kRowTileTrailingSize,
    this.titleMaxLines = 1,
    this.subtitleMaxLines = 1,
    this.borderRadius,
    this.borderColor,
    this.margin,
    this.padding,
    this.leadingMargin = kRowTileLeadingMargin,
    this.leadingPadding = kRowTileLeadingDensePadding,
    this.titleChildrenPadding = kRowTileChildrenPadding,
    this.subtitleChildrenPadding = kRowTileChildrenPadding,
    this.constraints = kTileConstraints,
    this.alignment = CrossAxisAlignment.center,
    this.onTapTitle,
    this.onTapSubtitle,
    this.onTap,
    this.onTapHead,
    this.onTapLeading,
    super.key,
  });

  /// Tile with no accessory, no background and no filled leading and
  /// have tinted accessory, and horizontal padding of 4dp.
  const SmartListTile.item({
    this.leading,
    this.title,
    this.subtitle,
    this.titleChild,
    this.subtitleChild,
    this.titleChildren,
    this.subtitleChildren,
    this.titleHint,
    this.subtitleHint,
    this.trailingTop,
    this.trailingTopChild,
    this.trailingBottom,
    this.trailingBottomChild,
    this.trailingTitle,
    this.trailingTitleChild,
    this.trailingSubtitle,
    this.trailingSubtitleChild,
    this.titleStyle,
    this.subtitleStyle,
    this.trailingStyle,
    this.accessory,
    this.rows,
    this.belowRows,
    this.color,
    this.titleColor,
    this.subtitleColor,
    this.backgroundColor = Colors.transparent,
    this.headColor,
    this.trailingColor,
    this.leadingFilled = false,
    this.leadingTinted = false,
    this.leadingSmall = true,
    this.leadingOval = false,
    this.detail = false,
    this.padAccessory = true,
    this.showAccessory,
    this.tintAccessory = true,
    this.tintAble,
    this.titleWeight,
    this.subtitleWeight,
    this.titleSubbed = false,
    this.subtitleSubbed = true,
    this.destructive,
    this.titleExpanded = false,
    this.subtitleExpanded = false,
    this.enabled = true,
    this.highlighted,
    this.checked,
    this.cupertino = false,
    this.animate = false,
    this.horizontalPadding,
    this.verticalPadding,
    this.topPadding,
    this.bottomPadding,
    this.startPadding = 4,
    this.endPadding = 4,
    this.trailingPadding,
    this.verticalSpacing = 0,
    this.titleSize = kTileFontSize,
    this.subtitleSize = kTileFontSize,
    this.leadingSize,
    this.leadingBoxSize = SmartBox.kBoxSize,
    this.accessorySize = kRowTileTrailingSize,
    this.trailingSize = kRowTileTrailingSize,
    this.titleMaxLines,
    this.subtitleMaxLines,
    this.borderRadius,
    this.borderColor,
    this.margin,
    this.padding,
    this.leadingMargin = kRowTileLeadingMargin,
    this.leadingPadding = kRowTileLeadingPadding,
    this.titleChildrenPadding = kRowTileChildrenPadding,
    this.subtitleChildrenPadding = kRowTileChildrenPadding,
    this.constraints = kTileConstraints,
    this.alignment = CrossAxisAlignment.center,
    this.onTapTitle,
    this.onTapSubtitle,
    this.onTap,
    this.onTapHead,
    this.onTapLeading,
    super.key,
  });

  /// Tile with no accessory, no background and no filled leading and
  /// have tinted accessory, and standard horizontal padding.
  const SmartListTile.itemPad({
    this.leading,
    this.title,
    this.subtitle,
    this.titleChild,
    this.subtitleChild,
    this.titleChildren,
    this.subtitleChildren,
    this.titleHint,
    this.subtitleHint,
    this.trailingTop,
    this.trailingTopChild,
    this.trailingBottom,
    this.trailingBottomChild,
    this.trailingTitle,
    this.trailingTitleChild,
    this.trailingSubtitle,
    this.trailingSubtitleChild,
    this.titleStyle,
    this.subtitleStyle,
    this.trailingStyle,
    this.accessory,
    this.rows,
    this.belowRows,
    this.color,
    this.titleColor,
    this.subtitleColor,
    this.backgroundColor = Colors.transparent,
    this.headColor,
    this.trailingColor,
    this.leadingFilled = false,
    this.leadingTinted = false,
    this.leadingSmall = true,
    this.leadingOval = false,
    this.detail = false,
    this.padAccessory = true,
    this.showAccessory,
    this.tintAccessory = true,
    this.tintAble,
    this.titleWeight,
    this.subtitleWeight,
    this.titleSubbed = false,
    this.subtitleSubbed = true,
    this.destructive,
    this.titleExpanded = false,
    this.subtitleExpanded = false,
    this.enabled = true,
    this.highlighted,
    this.checked,
    this.cupertino = false,
    this.animate = false,
    this.horizontalPadding,
    this.verticalPadding,
    this.topPadding,
    this.bottomPadding,
    this.startPadding = kStandardPaddingX,
    this.endPadding = kStandardPaddingX,
    this.trailingPadding,
    this.verticalSpacing = 0,
    this.titleSize = kTileFontSize,
    this.subtitleSize = kTileFontSize,
    this.leadingSize,
    this.leadingBoxSize = SmartBox.kBoxSize,
    this.accessorySize = kRowTileTrailingSize,
    this.trailingSize = kRowTileTrailingSize,
    this.titleMaxLines,
    this.subtitleMaxLines,
    this.borderRadius,
    this.borderColor,
    this.margin,
    this.padding,
    this.leadingMargin = kRowTileLeadingMargin,
    this.leadingPadding = kRowTileLeadingPadding,
    this.titleChildrenPadding = kRowTileChildrenPadding,
    this.subtitleChildrenPadding = kRowTileChildrenPadding,
    this.constraints = kTileConstraints,
    this.alignment = CrossAxisAlignment.center,
    this.onTapTitle,
    this.onTapSubtitle,
    this.onTap,
    this.onTapHead,
    this.onTapLeading,
    super.key,
  });

  final dynamic leading;
  final String? title;
  final String? subtitle;
  final Widget? titleChild;
  final Widget? subtitleChild;
  final List<Widget>? titleChildren;
  final List<Widget>? subtitleChildren;
  final String? titleHint;
  final String? subtitleHint;
  final String? trailingTop;
  final Widget? trailingTopChild;
  final String? trailingBottom;
  final Widget? trailingBottomChild;
  final String? trailingTitle;
  final Widget? trailingTitleChild;
  final String? trailingSubtitle;
  final Widget? trailingSubtitleChild;
  final TextStyle? titleStyle;
  final TextStyle? subtitleStyle;
  final TextStyle? trailingStyle;
  final Widget? accessory;
  final List<Widget>? rows;
  final List<Widget>? belowRows;
  final Color? color;
  final Color? titleColor;
  final Color? subtitleColor;
  final Color? backgroundColor;
  final Color? headColor;
  final Color? trailingColor;
  final bool leadingFilled;
  final bool leadingTinted;
  final bool leadingSmall;
  final bool leadingOval;
  final bool detail;
  final bool? padAccessory;
  final bool? showAccessory;
  final bool? tintAccessory;
  final bool? tintAble;
  final FontWeight? titleWeight;
  final FontWeight? subtitleWeight;
  final bool titleSubbed;
  final bool subtitleSubbed;
  final bool? destructive;
  final bool titleExpanded;
  final bool subtitleExpanded;
  final bool enabled;
  final bool? highlighted;
  final bool? checked;
  final bool cupertino;
  final bool animate;
  final double? horizontalPadding;
  final double? verticalPadding;
  final double? topPadding;
  final double? bottomPadding;
  final double? startPadding;
  final double? endPadding;
  final double? trailingPadding;
  final double verticalSpacing;
  final double? titleSize;
  final double? subtitleSize;
  final double? leadingSize;
  final double leadingBoxSize;
  final double? accessorySize;
  final double? trailingSize;
  final int? titleMaxLines;
  final int? subtitleMaxLines;
  final double? borderRadius;
  final Color? borderColor;
  final EdgeInsetsGeometry? margin;
  final EdgeInsetsGeometry? padding;
  final EdgeInsetsGeometry leadingMargin;
  final EdgeInsetsGeometry leadingPadding;
  final EdgeInsetsGeometry titleChildrenPadding;
  final EdgeInsetsGeometry subtitleChildrenPadding;
  final BoxConstraints? constraints;
  final CrossAxisAlignment alignment;
  final VoidCallback? onTapTitle;
  final VoidCallback? onTapSubtitle;
  final VoidCallback? onTap;
  final VoidCallback? onTapHead;
  final VoidCallback? onTapLeading;

  @override
  Widget build(BuildContext context) {
    final vTintAble = destructive == true || (tintAble ?? false);
    final tintColor = destructive == true
        ? Colors.red
        : color ?? context.tileIconColor ?? context.secondaryColor;
    final vTrailingColor = vTintAble
        ? tintColor
        : trailingColor ?? context.iconColor ?? context.secondaryColor;
    final vAccessoryColor = tintAccessory == true
        ? tintColor
        : detail
            ? context.hintColor
            : vTrailingColor;
    final isTrailingTop =
        trailingTop?.notEmpty != null || trailingTopChild != null;
    final isTrailingBottom =
        trailingBottom?.notEmpty != null || trailingBottomChild != null;
    final isTrailingTitle =
        trailingTitle?.notEmpty != null || trailingTitleChild != null;
    final isTrailingSubtitle =
        trailingSubtitle?.notEmpty != null || trailingSubtitleChild != null;
    final vAccessory = accessory ??
        (checked == true
            ? const Icon(CupertinoIcons.check_mark)
            : detail
                ? const Icon(CupertinoIcons.chevron_right)
                : null);
    final vIsTitle = title?.notEmpty != null ||
        titleHint?.notEmpty != null ||
        titleChild != null ||
        titleChildren?.isNotEmpty == true;
    final vIsSubtitle = subtitle?.notEmpty != null ||
        subtitleHint?.notEmpty != null ||
        subtitleChild != null ||
        subtitleChildren?.isNotEmpty == true;
    final vShowAccessory =
        vAccessory != null && (showAccessory ?? checked ?? true);
    final vHighlighted = highlighted ?? checked ?? false;
    final vBackgroundColor = vHighlighted
        ? tintColor.highlighted
        : backgroundColor ?? context.surfaceContainerColor;
    final vShowTrailing = isTrailingTop ||
        isTrailingBottom ||
        isTrailingTitle ||
        isTrailingSubtitle;
    final vTrailingPadding = $mapTo(
          trailingPadding,
          (it) => EdgeInsetsDirectional.only(start: it),
        ) ??
        kRowTileTrailingPadding;
    final vTitleStyle = titleStyle ?? context.bodyMedium;
    final vTitleColor =
        titleColor ?? (vTintAble ? tintColor : vTitleStyle?.color);
    final vSubtitleStyle = subtitleStyle ?? context.bodyMedium;
    final vSubtitleColor =
        subtitleColor ?? (vTintAble ? tintColor : vSubtitleStyle?.color);
    final vStartPadding =
        horizontalPadding ?? startPadding ?? kStandardPaddingX;
    final vEndPadding = horizontalPadding ?? endPadding ?? kStandardPaddingX;
    final vTopPadding = verticalPadding ?? topPadding ?? kStandardPaddingY;
    final vBottomPadding =
        verticalPadding ?? bottomPadding ?? kStandardPaddingY;
    final vPadding = padding ??
        EdgeInsetsDirectional.only(
          start: vStartPadding,
          end: padAccessory == true
              ? vEndPadding
              : vShowAccessory
                  ? 6.0
                  : vShowTrailing
                      ? vEndPadding
                      : 0.0,
          top: vTopPadding,
          bottom: vBottomPadding.half,
        );
    return Padding(
      padding: margin ?? EdgeInsets.zero,
      child: Material(
        color: vBackgroundColor,
        shape: borderRadius?.roundedRectangleBorder(borderColor?.borderSide),
        clipBehavior: (borderRadius ?? 0) > 0 ? Clip.antiAlias : Clip.none,
        child: CupertinoButton(
          padding: EdgeInsets.zero,
          minSize: 0.0,
          onPressed: enabled && cupertino ? onTap : null,
          child: InkWell(
            highlightColor: tintColor.highlighted,
            splashColor: tintColor.lighted,
            onTap: enabled && !cupertino ? onTap : null,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                SmartRowTile.simple(
                  leading: leading,
                  leadingSize: leadingSize,
                  leadingBoxSize: leadingBoxSize,
                  leadingSmall: leadingSmall,
                  leadingFilled: leadingFilled,
                  leadingTinted: leadingTinted,
                  leadingOval: leadingOval,
                  leadingMargin: leadingMargin,
                  leadingPadding: leadingPadding,
                  detail: detail,
                  constraints: constraints,
                  color: color,
                  backgroundColor: headColor,
                  alignment: alignment,
                  enabled: enabled,
                  cupertino: cupertino,
                  animate: animate,
                  padding: vPadding,
                  onTap: onTapHead,
                  onTapLeading: onTapLeading,
                  trailingSize: accessorySize,
                  trailingColor: vAccessoryColor,
                  trailingStyle: trailingStyle,
                  trailingPadding: vTrailingPadding,
                  trailing: vShowAccessory || isTrailingTop || isTrailingBottom
                      ? Row(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            if (trailingPadding != null)
                              SizedBox(width: trailingPadding),
                            if (isTrailingTop || isTrailingBottom)
                              Column(
                                crossAxisAlignment: CrossAxisAlignment.end,
                                mainAxisSize: MainAxisSize.min,
                                children: [
                                  if (isTrailingTop)
                                    $mapTo(
                                          trailingTopChild,
                                          (it) => IconTheme(
                                            data: IconThemeData(
                                              color: vTrailingColor,
                                              size: trailingSize,
                                            ),
                                            child: it,
                                          ),
                                        ) ??
                                        Text(
                                          trailingTop!,
                                          style: trailingStyle ??
                                              context.bodySmall,
                                        ),
                                  if (isTrailingTop && isTrailingBottom)
                                    const Space.y(1.5),
                                  if (isTrailingBottom)
                                    $mapTo(
                                          trailingBottomChild,
                                          (it) => IconTheme(
                                            data: IconThemeData(
                                              color: vTrailingColor,
                                              size: trailingSize,
                                            ),
                                            child: it,
                                          ),
                                        ) ??
                                        Text(
                                          trailingBottom!,
                                          style: trailingStyle ??
                                              context.bodySmall,
                                        ),
                                ],
                              ),
                            if (vShowAccessory)
                              Padding(
                                padding: isTrailingTop || isTrailingBottom
                                    ? (detail
                                        ? const EdgeInsetsDirectional.only(
                                            start: 2,
                                          )
                                        : vTrailingPadding)
                                    : EdgeInsets.zero,
                                child: IconTheme(
                                  data: IconThemeData(
                                    color: vAccessoryColor,
                                    size: detail ? 14 : accessorySize,
                                  ),
                                  child: vAccessory,
                                ),
                              ),
                          ],
                        )
                      : null,
                  child: Column(
                    children: [
                      SmartRowTile.simple(
                        child: titleChild,
                        children: titleChildren,
                        childrenPadding: titleChildrenPadding,
                        text: title?.notEmpty,
                        textStyle: vTitleStyle,
                        textColor: vTitleColor?.applyIf(
                          titleSubbed,
                          (it) => it?.subbed,
                        ),
                        fontWeight: titleWeight,
                        fontSize: titleSize,
                        hint: titleHint,
                        trailingText: trailingTitle,
                        trailingStyle: trailingStyle,
                        trailing: trailingTitleChild,
                        trailingPadding: vTrailingPadding,
                        trailingColor: trailingColor,
                        trailingSize: trailingSize,
                        color: tintColor,
                        maxLines: titleMaxLines,
                        expanded: titleExpanded,
                        alignment: alignment == CrossAxisAlignment.center
                            ? alignment
                            : CrossAxisAlignment.baseline,
                        enabled: enabled,
                        cupertino: cupertino,
                        padding: EdgeInsets.zero,
                        onTap: onTapTitle,
                      ),
                      if (vIsTitle && vIsSubtitle) verticalSpacing.spaceY,
                      SmartRowTile.simple(
                        child: subtitleChild,
                        children: subtitleChildren,
                        childrenPadding: subtitleChildrenPadding,
                        text: subtitle?.notEmpty,
                        textStyle: vSubtitleStyle,
                        textColor: vSubtitleColor?.applyIf(
                          subtitleSubbed,
                          (it) => it?.subbed,
                        ),
                        fontWeight: subtitleWeight,
                        fontSize: subtitleSize,
                        hint: subtitleHint,
                        trailingText: trailingSubtitle,
                        trailingStyle: trailingStyle,
                        trailing: trailingSubtitleChild,
                        trailingPadding: vTrailingPadding,
                        trailingColor: trailingColor,
                        trailingSize: trailingSize,
                        color: tintColor,
                        maxLines: subtitleMaxLines,
                        expanded: subtitleExpanded,
                        alignment: alignment == CrossAxisAlignment.center
                            ? alignment
                            : CrossAxisAlignment.baseline,
                        enabled: enabled,
                        cupertino: cupertino,
                        padding: EdgeInsets.zero,
                        onTap: onTapSubtitle,
                      ),
                    ],
                  ),
                ),
                ...rows ?? [],
                if (padding == null) SizedBox(height: vBottomPadding.half),
                ...belowRows ?? [],
              ],
            ),
          ),
        ),
      ),
    );
  }
}

class SimpleListTile extends StatelessWidget {
  const SimpleListTile({
    super.key,
    this.title,
    this.padding = const EdgeInsets.symmetric(horizontal: 16, vertical: 3),
    this.onTap,
  });

  final Widget? title;
  final EdgeInsetsGeometry? padding;
  final VoidCallback? onTap;

  @override
  Widget build(BuildContext context) {
    return ListTile(
      title: title == null
          ? null
          : DefaultTextStyle(
              style: context.bodyLarge ?? const TextStyle(),
              child: title!,
            ),
      dense: true,
      contentPadding: padding,
      onTap: onTap,
    );
  }
}
